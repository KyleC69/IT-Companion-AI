// Project Name: LightweightAI.Core
// File Name: TraceSessionLoader.cs
// Author: AutoGenerated
// License: All Rights Reserved. No use without consent.
// Do not remove file headers

using LightweightAI.Core.Abstractions;

namespace LightweightAI.Core.Loaders.Windows;

/// <summary>
/// Placeholder ETW trace session loader. In future will hook to real-time ETW providers (e.g. Kernel, Microsoft-Windows-DotNETRuntime)
/// capturing structured fields. Currently emits synthetic events for pipeline integration tests.
/// </summary>
public sealed class TraceSessionLoader : ISourceLoader
{
    private readonly int _count;
    public TraceSessionLoader(int count = 1000) => _count = count;

    public async IAsyncEnumerable<RawEvent> LoadAsync(SourceRequest request, [System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken ct = default)
    {
        for (int i = 0; i < _count; i++)
        {
            ct.ThrowIfCancellationRequested();
            var ts = DateTimeOffset.UtcNow;
            var payload = new Dictionary<string, object?>
            {
                ["Provider"] = "Synthetic.Provider",
                ["ActivityId"] = Guid.NewGuid(),
                ["Seq"] = i,
                ["Phase"] = (i % 2 == 0 ? "Start" : "Stop")
            };
            yield return new RawEvent(request.SourceKey, 0, ts, Environment.MachineName, null, "Info", payload, $"etw:{i}");
            if (i % 128 == 0) await Task.Yield();
        }
    }
}
