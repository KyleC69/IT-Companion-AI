// Project Name: LightweightAI.Core
// File Name: HealthStatusLoader.cs
// Author: AutoGenerated
// License: All Rights Reserved. No use without consent.
// Do not remove file headers

using LightweightAI.Core.Abstractions;

namespace LightweightAI.Core.Loaders.Windows;

/// <summary>
/// Synthetic system health snapshot loader (placeholder) that emits periodic composite health records
/// (CPU, Memory, Disk, Network) for correlation with event logs. Replace with WMI / PerformanceCounter
/// backed implementation.
/// </summary>
public sealed class HealthStatusLoader : ISourceLoader
{
    private readonly TimeSpan _interval;
    private readonly int _max;

    public HealthStatusLoader(TimeSpan? interval = null, int maxSnapshots = 500)
    {
        _interval = interval ?? TimeSpan.FromSeconds(5);
        _max = maxSnapshots;
    }

    public async IAsyncEnumerable<RawEvent> LoadAsync(SourceRequest request, [System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken ct = default)
    {
        for (int i = 0; i < _max; i++)
        {
            ct.ThrowIfCancellationRequested();
            var now = DateTimeOffset.UtcNow;
            var metrics = new Dictionary<string, object?>
            {
                ["CpuPercent"] = Random.Shared.Next(0,100),
                ["MemUsedMB"] = Random.Shared.Next(500, 16_000),
                ["DiskQueue"] = Random.Shared.NextDouble()*2,
                ["NetKBps"] = Random.Shared.Next(0, 20000)
            };
            yield return new RawEvent(request.SourceKey, 0, now, Environment.MachineName, null, "Info", metrics, $"health:{i}");
            await Task.Delay(_interval, ct);
        }
    }
}
