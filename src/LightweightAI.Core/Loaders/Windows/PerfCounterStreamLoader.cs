// Project Name: LightweightAI.Core
// File Name: PerfCounterStreamLoader.cs
// Author: AutoGenerated
// License: All Rights Reserved. No use without consent.
// Do not remove file headers

using LightweightAI.Core.Abstractions;

namespace LightweightAI.Core.Loaders.Windows;

/// <summary>
/// Placeholder streaming performance counter loader (CPU %, Available MBytes, Disk Reads/sec etc.).
/// Implementations should poll PerformanceCounter / PDH or WMI per interval.
/// </summary>
public sealed class PerfCounterStreamLoader : ISourceLoader
{
    private readonly TimeSpan _interval;
    private readonly int _max;

    public PerfCounterStreamLoader(TimeSpan? interval = null, int maxSamples = 1000)
    {
        _interval = interval ?? TimeSpan.FromSeconds(2);
        _max = maxSamples;
    }

    public async IAsyncEnumerable<RawEvent> LoadAsync(SourceRequest request, [System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken ct = default)
    {
        for (int i = 0; i < _max; i++)
        {
            ct.ThrowIfCancellationRequested();
            var now = DateTimeOffset.UtcNow;
            var fields = new Dictionary<string, object?>
            {
                ["CpuUserPercent"] = Random.Shared.Next(0,100),
                ["CpuPrivPercent"] = Random.Shared.Next(0,100),
                ["AvailMemMB"] = Random.Shared.Next(500, 32_000),
                ["DiskReadKBps"] = Random.Shared.Next(0, 50_000),
                ["DiskWriteKBps"] = Random.Shared.Next(0, 50_000),
                ["NetErrors"] = Random.Shared.Next(0,10)
            };
            yield return new RawEvent(request.SourceKey, 0, now, Environment.MachineName, null, "Info", fields, $"perf:{i}");
            await Task.Delay(_interval, ct);
        }
    }
}
